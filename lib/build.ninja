# This ninja-build file requires pandoc-tangle, kompile, etc to be in PATH. As such it is not meant
# to be run directly, but through the ./build script.

# Configuration & Repository Layout
# =================================

builddir            = .build
testdir             = $builddir/test
tangle_repository   = $builddir/pandoc-tangle
opam_root           = $builddir/opam
tangleddir          = $builddir/tangled/
k_repository        = $builddir/k
k_bindir            = $k_repository/k-distribution/target/release/k/bin
blockchainplugindir = ext/blockchain-k-plugin/plugin/

include ext/kninja/prelude.ninja

build $builddir/generated.ninja : python3-generator lib/build.py
default $builddir/generated.ninja

# Dependencies
# ============

build $tangle_repository/.git : git-submodule-init

build $builddir/k/.git  : git-submodule-init
build $k_bindir/kompile : build-k $builddir/k/.git

# TODO: This should depend on the repository configuration instead of kompile
build $opam_root/4.03.0+k/bin/ocamlc : opam-build-ocamlc-k $k_bindir/kompile

build $opam_root/4.03.0+k/lib/cryptokit/opam.config : opam-install $opam_root/4.03.0+k/bin/ocamlc
    package = cryptokit
build $opam_root/4.03.0+k/lib/mlgmp/opam.config : opam-install $opam_root/4.03.0+k/bin/ocamlc
    package = mlgmp
build $opam_root/4.03.0+k/lib/uuidm/opam.config : opam-install $opam_root/4.03.0+k/bin/ocamlc
    package = uuidm

# Plutus (Compilation)
# ====================

build $tangleddir/plutus-core.k      : tangle plutus-core.md $
                                     | $tangle_repository/.git
build $tangleddir/typing.k           : tangle typing.md $
                                     | $tangle_repository/.git
build $tangleddir/plutus-core-spec.k : tangle plutus-core-spec.md $
                                     | $tangle_repository/.git
build $tangleddir/krypto.k           : tangle $blockchainplugindir/krypto.md $
                                     | $tangle_repository/.git
    tangle_selector = .cryptography-hashes
build $tangleddir/unit-tests-spec.k   : tangle unit-tests.md
build $tangleddir/typing-tests-spec.k : tangle typing-tests.md
build $tangleddir/verification-spec.k : tangle verification.md

# Java build kompile pipeline
# ---------------------------

build $builddir/plutus-core-java/plutus-core-kompiled/timestamp : kompile $tangleddir/plutus-core.k $
                                                                | $tangleddir/krypto.k              $
                                                                  $k_bindir/kompile
    backend = java

build $builddir/typing-java/typing-kompiled/timestamp : kompile $tangleddir/typing.k $
                                                      | $tangleddir/plutus-core.k    $
                                                        $k_bindir/kompile
    backend = java
    kompile_flags = --main-module PLUTUS-CORE-TYPING

# OCaml build kompile pipeline
# ----------------------------

ocamlkompileddir = $builddir/plutus-core-ocaml/plutus-core-kompiled/

build $ocamlkompileddir/lexer.ml       $
      $ocamlkompileddir/parser.ml      $
      $ocamlkompileddir/prelude.ml     $
      $ocamlkompileddir/plugin.ml      $
      $ocamlkompileddir/parser.mli     $
      $ocamlkompileddir/run.ml         $
      $ocamlkompileddir/interpreter.ml $
      $ocamlkompileddir/realdef.ml     $
      $ocamlkompileddir/constants.ml : kompile-gen-ml $tangleddir/plutus-core.k $
                                     | $tangleddir/krypto.k
    directory = $builddir/plutus-core-ocaml/
    flags = --hook-namespaces HASH

build $ocamlkompileddir/interpreter $
    | $ocamlkompileddir/realdef.cmx : ocamlopt $ocamlkompileddir/constants.ml $
                                               $ocamlkompileddir/prelude.ml   $
                                               $ocamlkompileddir/plugin.ml    $
                                               $blockchainplugindir/HASH.ml   $
                                               $ocamlkompileddir/realdef.ml   $
                                               $ocamlkompileddir/parser.mli   $
                                               $ocamlkompileddir/parser.ml    $
                                               $ocamlkompileddir/lexer.ml     $
                                               $ocamlkompileddir/run.ml       $
                                               $ocamlkompileddir/interpreter.ml $
                                             | $opam_root/4.03.0+k/bin/ocamlc $
                                               $opam_root/4.03.0+k/lib/cryptokit/opam.config $
                                               $opam_root/4.03.0+k/lib/mlgmp/opam.config        $
                                               $opam_root/4.03.0+k/lib/uuidm/opam.config
    flags = -g -w -11-26 -I $ocamlkompileddir -I $blockchainplugindir $
            -package gmp -package dynlink -package zarith -package str -package uuidm -package unix -package cryptokit $
            -linkpkg -linkall -thread -safe-string

build $ocamlkompileddir/realdef.cmxs : ocamlopt $ocamlkompileddir/realdef.cmx
    flags = -shared

# Testing
# =======

# Unit Tests as reachability claims
# ---------------------------------

build check-unit-tests : kprove $tangleddir/unit-tests-spec.k | spec-java
    directory = $builddir/plutus-core-java
default check-unit-tests

build check-typing-tests : kprove $tangleddir/typing-tests-spec.k | typing-java
    directory = $builddir/typing-java
default check-typing-tests

build check-10 : kprove sum-to-10-spec.k $
                 | spec-java
    directory = $builddir/plutus-core-java
default check-10

build check-verification : kprove $tangleddir/verification-spec.k | spec-java
    directory = $builddir/plutus-core-java
default check-verification

# Integration tests
# -----------------
#
# Additional tests are generated by `build.py` and located in `.build/generated.ninja`.

# Aliases
# -------

build spec-ocaml : phony $builddir/plutus-core-ocaml/plutus-core-kompiled/interpreter $ocamlkompileddir/realdef.cmxs
build typing-java : phony $builddir/typing-java/typing-kompiled/timestamp
