#!/usr/bin/env bash

set -eu     # Fail on non-zero exit code, undefined variable

base="$(cd "$(dirname "$0")"; pwd)"
build_dir="$base/.build"
k_submodule="$build_dir/k"
k_bin_dir="$k_submodule/k-distribution/target/release/k/bin"
plutus_core_kompiled="$build_dir/plutus-core"

# Basic Utility functions
# =======================

log() {
    echo >&2 "=== " $@
}

# Dependencies
# ============

download_k() {
    log "Downloading K"
    git submodule update --init --recursive .build/k
}

# Since K needs a modified ocaml compiler, use a opam root directory private to
# this project so as not to intefere with other opam packages such as coq.
#
export OPAMROOT="$build_dir/opam"
build_ocamlc() {
    log "Setting up OCaml"
    opam init --quiet --no-setup --yes
    opam repository add k "$k_submodule/k-distribution/target/release/k/lib/opam" \
        || opam repository set-url k "$k_submodule/k-distribution/target/release/k/lib/opam"
    opam update
    opam switch -v 4.03.0+k
    opam install --yes mlgmp zarith uuidm
}

build_k() {
    log "Building K"
	(cd "$k_submodule" && mvn package -q -DskipTests)
}

init_env() {
    eval $(opam config env)
    export PATH="$PATH:$k_bin_dir"
}

# K Specifications
# ================

kompile_def() {
    ninja
}

kprove_spec() {
    log "Checking spec"
    kprove --directory "$plutus_core_kompiled" plutus-core-spec.k x.plc
}

# Main
# ====

init_env
[[ -f "$k_submodule/.git"  ]]                   || download_k
[[ -x "$build_dir/opam/4.03.0+k/bin/ocamlc" ]]  || build_ocamlc
[[ -x "$k_bin_dir/kompile" ]]                   || build_k
kompile_def
kprove_spec
