#!/usr/bin/env bash

# Usage
# =====
# 
# Execute ninja:
#
#   ./build [<arguments-to-ninja>] [-- command-to-run]
#

set -eu     # Fail on non-zero exit code, undefined variable

base="$(cd "$(dirname "$0")"; pwd)"
build_dir="$base/.build"
k_submodule="$build_dir/k"

# Helpers
# =======

log()  { echo >&2 "=== " $@ ; }
fail() { log "$@"; exit 1   ; }

init_env() {
    type -t ninja > /dev/null || fail "ninja-build not available. Giving up."

    # Since K needs a modified ocaml compiler, use a opam root directory private to
    # this project so as not to intefere with other opam packages such as coq.
    #
    export OPAMROOT="$build_dir/opam"
    eval $(opam config env)

    export PYTHONPATH="$base/ext/"
}


have_user_specified_command() { [[ ${#command[@]}    -gt 0 ]] ; }
have_ninja_args()             { [[ ${#ninja_args[@]} -gt 0 ]] ; }

# Main
# ====

init_env
python3 lib/build.py
ninja_args=( )
while [[ $# -gt 0 ]] ; do
    [[ "$1" != "--" ]] || { shift ; break ; }
    ninja_args+=( $1 ) ; shift
done
command=( "$@" )
if ! have_user_specified_command || have_ninja_args ; then
   ninja -f $build_dir/generated.ninja "${ninja_args[@]}"
fi
if have_user_specified_command ; then
   exec "${command[@]}"
fi
