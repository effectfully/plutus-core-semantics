#!/usr/bin/env bash

# Usage
# =====
# 
# Execute ninja:
#
#   ./build [<arguments-to-ninja>] [-- command-to-run]
#

set -eu     # Fail on non-zero exit code, undefined variable

base="$(cd "$(dirname "$0")"; pwd)"
build_dir="$base/.build"
k_submodule="$build_dir/k"
k_bin_dir="$k_submodule/k-distribution/target/release/k/bin"

# Basic Utility functions
# =======================

log()  { echo >&2 "=== " $@ ; }
fail() { log "$@"; exit 1   ; }

# Dependencies
# ============

download_k() {
    log "Downloading K"
    git submodule update --init --recursive .build/k
}

# Since K needs a modified ocaml compiler, use a opam root directory private to
# this project so as not to intefere with other opam packages such as coq.
#
export OPAMROOT="$build_dir/opam"
build_ocamlc() {
    log "Setting up OCaml"
    opam init --quiet --no-setup --yes
    opam repository add k "$k_submodule/k-distribution/target/release/k/lib/opam" \
        || opam repository set-url k "$k_submodule/k-distribution/target/release/k/lib/opam"
    opam update
    opam switch -v 4.03.0+k
    opam install --yes mlgmp zarith uuidm
}

build_k() {
    log "Building K"
	(cd "$k_submodule" && mvn package -q -DskipTests)
}

init_env() {
    type -t ninja > /dev/null || fail "ninja-build not available. Giving up."
    eval $(opam config env)
    export PATH="$PATH:$k_bin_dir"
}

have_user_specified_command() { [[ ${#command[@]}    -gt 0 ]] ; }
have_ninja_args()             { [[ ${#ninja_args[@]} -gt 0 ]] ; }

# Main
# ====

init_env
[[ -f "$k_submodule/.git"  ]]                   || download_k
[[ -x "$k_bin_dir/kompile" ]]                   || build_k
[[ -x "$build_dir/opam/4.03.0+k/bin/ocamlc" ]]  || build_ocamlc
ninja_args=( )
while [[ $# -gt 0 ]] ; do
    [[ "$1" != "--" ]] || { shift ; break ; }
    ninja_args+=( $1 ) ; shift
done
command=( "$@" )
if ! have_user_specified_command || have_ninja_args ; then
   ninja "${ninja_args[@]}"
fi
if have_user_specified_command ; then
   exec "${command[@]}"
fi
