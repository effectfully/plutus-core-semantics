(program
  (module Foo (import) (export () (add addFive addFiveApp add1923App
                                   sub mult div mod nested one complex))

    (declare notPublic (fun (integer) (fun (integer) (integer))))
    (define notPublic (lam x (lam y (builtin addInteger x y))))

    (declare add (fun (integer) (fun (integer) (integer))))
    (define add (lam x (lam y (builtin addInteger x y))))

    (declare addFive (fun (integer) (integer)))
    (define addFive (lam x (builtin addInteger x 5)))

    (declare addFiveApp (fun (integer) (integer)))
    (define addFiveApp (lam x [Foo.addFive x]))

    (declare add1923App (fun (integer) (integer)))
    (define add1923App (lam x [[Foo.add 19] 23]))

    (declare sub (fun (integer) (fun (integer) (integer))))
    (define sub (lam x (lam y (builtin subtractInteger x y))))

    (declare mult (fun (integer) (fun (integer) (integer))))
    (define mult (lam x (lam y (builtin multiplyInteger x y))))

    (declare div (fun (integer) (fun (integer) (integer))))
    (define div (lam x (lam y (builtin divideInteger x y))))

    (declare mod (fun (integer) (fun (integer) (integer))))
    (define mod (lam x (lam y (builtin remainderInteger x y))))

    (declare nested (fun (integer) (fun (integer) (fun (integer) (integer)))))
    (define nested (lam x (lam y (lam z (builtin addInteger (builtin multiplyInteger x y) z)))))

    (declare one (integer))
    (define one 1)

    (declare complex
      (fun (integer)
           (fun (integer)
                (fun (integer)
                     (fun (integer)
                          (fun (integer)
                               (fun (integer) (integer))))))))

    (define complex
      (lam a
        (lam b
          (lam c
            (lam d
              (lam e
                (lam f
                  [Foo.addFive [[Foo.mod [[Foo.div [[Foo.mult [[Foo.sub [[Foo.add a] b]] c]] d]] e]] f]])))))))

  )
)
