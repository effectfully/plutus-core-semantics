(program 0.1.0
    [ [ [ { { (abs a (type) (abs b (type) (lam f (fun (fun a b) (fun a b)) [ { (abs a (type) (lam s (fix self (fun self a)) [ (unwrap s) s ])) (fun a b) } (wrap self (fun self (fun a b)) (lam s (fix self (fun self (fun a b))) (lam x a [ [ f [ { (abs a (type) (lam s (fix self (fun self a)) [ (unwrap s) s ])) (fun a b) } s ] ] x ]))) ]))) r } (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) }
          (lam recur dummyTyVar
               (lam z r
                    (lam n dummyTyVar
                         [ [ [ [ { #case #unit }
                                 [[(con equalsInteger) (con 5 ! 0)] n ]
                               ]
                               (lam f #unit z)
                             ]
                             [ recur [[ (con addInteger) z] n ] ]
                           ]
                           [ [(con subtractInteger) n] (con 5 ! 1) ]
                         ]
          )    )    )
        ]
        (con 5 ! 0)
      ]
      (con 5 ! 10)
    ]
)
