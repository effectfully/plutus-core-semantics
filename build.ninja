# This ninja-build file requires pandoc-tangle, kompile, etc to be in PATH. As such it is not meant
# to be run directly, but through the ./build script.

# Configuration & Repository Layout
# =================================

builddir            = .build
testdir             = $builddir/test
tangle_repository   = $builddir/pandoc-tangle
opam_root           = $builddir/opam
tangleddir          = $builddir/tangled/
k_repository        = $builddir/k
k_bindir            = $k_repository/k-distribution/target/release/k/bin
blockchainplugindir = ext/blockchain-k-plugin/plugin/

include ext/kninja/prelude.ninja

# Dependencies
# ============

build $tangle_repository/.git : git-submodule-init

build $builddir/k/.git  : git-submodule-init
build $k_bindir/kompile : build-k $builddir/k/.git

# TODO: This should depend on the repository configuration instead of kompile
build $opam_root/4.03.0+k/bin/ocamlc : opam-build-ocamlc-k $k_bindir/kompile

build $opam_root/4.03.0+k/lib/cryptokit/opam.config : opam-install $opam_root/4.03.0+k/bin/ocamlc
    package = cryptokit
build $opam_root/4.03.0+k/lib/mlgmp/opam.config : opam-install $opam_root/4.03.0+k/bin/ocamlc
    package = mlgmp
build $opam_root/4.03.0+k/lib/uuidm/opam.config : opam-install $opam_root/4.03.0+k/bin/ocamlc
    package = uuidm

# Plutus (Compilation)
# ====================

build $tangleddir/plutus-core.k      : tangle plutus-core.md $
                                     | $tangle_repository/.git
build $tangleddir/plutus-core-spec.k : tangle plutus-core-spec.md $
                                     | $tangle_repository/.git
build $tangleddir/krypto.k           : tangle $blockchainplugindir/krypto.md $
                                     | $tangle_repository/.git
    tangle_selector = .cryptography-hashes
build $tangleddir/unit-tests-spec.k   : tangle unit-tests.md
build $tangleddir/verification-spec.k : tangle verification.md

# Java build kompile pipeline
# ---------------------------

build $builddir/plutus-core-java/plutus-core-kompiled/timestamp : kompile $tangleddir/plutus-core.k $
                                                                | $tangleddir/krypto.k              $
                                                                  $k_bindir/kompile
    backend = java

# OCaml build kompile pipeline
# ----------------------------

ocamlkompileddir = $builddir/plutus-core-ocaml/plutus-core-kompiled/

build $ocamlkompileddir/lexer.mll      $
      $ocamlkompileddir/parser.mly     $
      $ocamlkompileddir/prelude.ml     $
      $ocamlkompileddir/plugin.ml      $
      $ocamlkompileddir/parser.mli     $
      $ocamlkompileddir/run.ml         $
      $ocamlkompileddir/interpreter.ml $
      $ocamlkompileddir/realdef.ml     $
      $ocamlkompileddir/constants.ml : kompile-gen-ml $tangleddir/plutus-core.k $
                                     | $tangleddir/krypto.k
    directory = $builddir/plutus-core-ocaml/
    flags = --hook-namespaces HASH

build $ocamlkompileddir/lexer.ml    : ocamllex $ocamlkompileddir/lexer.mll
build $ocamlkompileddir/parser.ml   : ocamlyacc $ocamlkompileddir/parser.mly
build $ocamlkompileddir/interpreter $
    | $ocamlkompileddir/realdef.cmx : ocamlopt $ocamlkompileddir/constants.ml $
                                               $ocamlkompileddir/prelude.ml   $
                                               $ocamlkompileddir/plugin.ml    $
                                               $blockchainplugindir/HASH.ml   $
                                               $ocamlkompileddir/realdef.ml   $
                                               $ocamlkompileddir/parser.mli   $
                                               $ocamlkompileddir/parser.ml    $
                                               $ocamlkompileddir/lexer.ml     $
                                               $ocamlkompileddir/run.ml       $
                                               $ocamlkompileddir/interpreter.ml $
                                             | $opam_root/4.03.0+k/bin/ocamlc $
                                               $opam_root/4.03.0+k/lib/cryptokit/opam.config $
                                               $opam_root/4.03.0+k/lib/mlgmp/opam.config        $
                                               $opam_root/4.03.0+k/lib/uuidm/opam.config
    flags = -g -w -11-26 -I $ocamlkompileddir -I $blockchainplugindir $
            -package gmp -package dynlink -package zarith -package str -package uuidm -package unix -package cryptokit $
            -linkpkg -linkall -thread -safe-string

build $ocamlkompileddir/realdef.cmxs : ocamlopt $ocamlkompileddir/realdef.cmx
    flags = -shared

# Testing
# =======

# Unit Tests as reachability claims
# ---------------------------------

build check-unit-tests : kprove $tangleddir/unit-tests-spec.k | spec-java
    directory = $builddir/plutus-core-java
default check-unit-tests

build check-10 : kprove sum-to-10-spec.k $
                 | spec-java
    directory = $builddir/plutus-core-java
default check-10

build check-verification : kprove $tangleddir/verification-spec.k | spec-java
    directory = $builddir/plutus-core-java
default check-verification

# Integration tests
# -----------------
#
# Since the OCaml does not support reachability claims (even
# concrete ones) these also function as smoke tests for the OCaml backend)

# t/builtin-app.plc (ocaml)
#
build .build/t/builtin-app.plc.ocaml.out : krun t/builtin-app.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml/
    flags     = --interpret
build .build/t/builtin-app.plc.ocaml.test : check-test-result .build/t/builtin-app.plc.ocaml.out
    expected = t/builtin-app.plc.expected
default .build/t/builtin-app.plc.ocaml.test

# t/builtin-app.plc (java)
#
build .build/t/builtin-app.plc.java.out  : krun t/builtin-app.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/builtin-app.plc.java.test : check-test-result .build/t/builtin-app.plc.java.out
    expected = t/builtin-app.plc.expected
default .build/t/builtin-app.plc.java.test

# t/bytestring.plc (ocaml)
#
build .build/t/bytestring.plc.ocaml.out : krun t/bytestring.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/bytestring.plc.ocaml.test : check-test-result .build/t/bytestring.plc.ocaml.out
    expected = t/bytestring.plc.ocaml.expected

# t/bytestring.plc (java)
#
build .build/t/bytestring.plc.java.out  : krun t/bytestring.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/bytestring.plc.java.test : check-test-result .build/t/bytestring.plc.java.out
    expected = t/bytestring.plc.java.expected

# Cryptography
# ------------

# t/sha2.plc (ocaml)
#
build .build/t/sha2.plc.ocaml.out : krun t/sha2.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml/
    flags     = --interpret
build .build/t/sha2.plc.ocaml.test : check-test-result .build/t/sha2.plc.ocaml.out
    expected = t/sha2.plc.ocaml.expected
default .build/t/sha2.plc.ocaml.test

# # t/sha2.plc (java)
# #
# build .build/t/sha2.plc.java.out  : krun t/sha2.plc | spec-java
#     directory = $builddir/plutus-core-java
# build .build/t/sha2.plc.java.test : check-test-result .build/t/sha2.plc.java.out
#     expected = t/sha2.plc.java.expected
# default .build/t/sha2.plc.java.test

# t/sha3.plc (ocaml)
#
build .build/t/sha3.plc.ocaml.out : krun t/sha3.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml/
    flags     = --interpret
build .build/t/sha3.plc.ocaml.test : check-test-result .build/t/sha3.plc.ocaml.out
    expected = t/sha3.plc.ocaml.expected
default .build/t/sha3.plc.ocaml.test

# # t/sha3.plc (java)
# #
# build .build/t/sha3.plc.java.out  : krun t/sha3.plc | spec-java
#     directory = $builddir/plutus-core-java
# build .build/t/sha3.plc.java.test : check-test-result .build/t/sha3.plc.java.out
#     expected = t/sha3.plc.java.expected
# default .build/t/sha3.plc.java.test

# Complex tests
# -------------

# These are tests involving recursion, and other tests from the Roman and the
# IOHK Plutus team.

# t/sum-to-10.plc (ocaml)
#
build .build/t/sum-to-10.plc.ocaml.out : krun t/sum-to-10.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/sum-to-10.plc.ocaml.test : check-test-result .build/t/sum-to-10.plc.ocaml.out
    expected = t/sum-to-10.plc.ocaml.expected

# t/sum-to-10.plc (java)
#
build .build/t/sum-to-10.plc.java.out  : krun t/sum-to-10.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/sum-to-10.plc.java.test : check-test-result .build/t/sum-to-10.plc.java.out
    expected = t/sum-to-10.plc.java.expected

# t/11-scott-to-int.plc (ocaml)
#
build .build/t/11-scott-to-int.plc.ocaml.out : krun t/11-scott-to-int.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/11-scott-to-int.plc.ocaml.test : check-test-result .build/t/11-scott-to-int.plc.ocaml.out
    expected = t/11-scott-to-int.plc.ocaml.expected

# t/11-scott-to-int.plc (java)
#
build .build/t/11-scott-to-int.plc.java.out  : krun t/11-scott-to-int.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/11-scott-to-int.plc.java.test : check-test-result .build/t/11-scott-to-int.plc.java.out
    expected = t/11-scott-to-int.plc.java.expected

# t/if-then-else.plc (ocaml)
#
build .build/t/if-then-else.plc.ocaml.out : krun t/if-then-else.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/if-then-else.plc.ocaml.test : check-test-result .build/t/if-then-else.plc.ocaml.out
    expected = t/if-then-else.plc.ocaml.expected

# t/if-then-else.plc (java)
#
build .build/t/if-then-else.plc.java.out  : krun t/if-then-else.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/if-then-else.plc.java.test : check-test-result .build/t/if-then-else.plc.java.out
    expected = t/if-then-else.plc.java.expected

# t/sum-list.plc (ocaml)
#
build .build/t/sum-list.plc.ocaml.out : krun t/sum-list.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/sum-list.plc.ocaml.test : check-test-result .build/t/sum-list.plc.ocaml.out
    expected = t/sum-list.plc.ocaml.expected

# t/sum-list.plc (java)
#
build .build/t/sum-list.plc.java.out  : krun t/sum-list.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/sum-list.plc.java.test : check-test-result .build/t/sum-list.plc.java.out
    expected = t/sum-list.plc.java.expected

# Aliases
# -------

build spec-ocaml : phony $builddir/plutus-core-ocaml/plutus-core-kompiled/interpreter $ocamlkompileddir/realdef.cmxs
build spec-java  : phony $builddir/plutus-core-java/plutus-core-kompiled/timestamp
