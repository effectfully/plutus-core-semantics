# This ninja-build file requires pandoc-tangle, kompile, etc to be in PATH. As such it is not meant
# to be run directly, but through the ./build script.

# Infrastructure generic to all K Projects
# ========================================

builddir = .build
testdir  = $builddir/test

rule kompile
    description     = Kompiling $in ($backend)
    command         = kompile --backend $backend --debug --directory $$(dirname $$(dirname $out)) $in


rule krun
    description     = Running $in ($directory)
    command         = krun $flags --debug --directory $directory $in > $out

rule kprove
    description     = Checking specification $in
    command         = kprove $flags --directory $directory $in

tangle_selector = .k
tangle_repository = $builddir/pandoc-tangle
rule tangle
    description = Tangling $in
    command     = LUA_PATH=$tangle_repository/?.lua    $
                  pandoc $in -o $out --metadata=code:$tangle_selector --to "$tangle_repository/tangle.lua"

rule check-test-result
    description = Checking $in
    command = git diff --no-index $in $expected

# OCaml compilation
# -----------------
#
# For compiling K plugins for the OCaml backend, we need a two-stage kompilation process. In the
# first step, we generate the Constants.ml and other ml files, and use those to in the compilation
# of the plugin implementation.
#
rule kompile-gen-ml
    description     = kompiling $in: Generating OCaml files
    command         = kompile $flags --backend ocaml --debug --directory $directory $in $
                           --gen-ml-only

rule kompile-interpreter
    description     = kompile $in: Compiling
    command         = bin/interpreter-from-ml $$(dirname $out) $mlplugins

rule ocamllex
    description     = ocamllex $in
    command         = ocamllex $flags $in

rule ocamlyacc
    description     = ocamlyacc $in
    command         = ocamlyacc $flags $in

rule ocamlopt
    description     = ocamlopt $out
    command         = ocamlfind opt -o $out $flags $in

# Plutus (Compilation)
# ====================

tangleddir = $builddir/tangled/
blockchainplugindir = ext/blockchain-k-plugin/plugin/

build $tangleddir/plutus-core.k      : tangle plutus-core.md
build $tangleddir/plutus-core-spec.k : tangle plutus-core-spec.md
build $tangleddir/krypto.k           : tangle $blockchainplugindir/krypto.md
    tangle_selector = .cryptography-hashes

# Java build kompile pipeline
# ---------------------------

build $builddir/plutus-core-java/plutus-core-kompiled/timestamp : kompile $tangleddir/plutus-core.k $
                                                                | $tangleddir/krypto.k
    backend = java

# OCaml build kompile pipeline
# ----------------------------

ocamlkompileddir = $builddir/plutus-core-ocaml/plutus-core-kompiled/

build $ocamlkompileddir/lexer.mll      $
      $ocamlkompileddir/parser.mly     $
      $ocamlkompileddir/prelude.ml     $
      $ocamlkompileddir/plugin.ml      $
      $ocamlkompileddir/parser.mli     $
      $ocamlkompileddir/run.ml         $
      $ocamlkompileddir/interpreter.ml $
      $ocamlkompileddir/realdef.ml     $
      $ocamlkompileddir/constants.ml : kompile-gen-ml $tangleddir/plutus-core.k $
                                     | $tangleddir/krypto.k
    directory = $builddir/plutus-core-ocaml/
    flags = --hook-namespaces HASH

build $ocamlkompileddir/lexer.ml    : ocamllex $ocamlkompileddir/lexer.mll
build $ocamlkompileddir/parser.ml   : ocamlyacc $ocamlkompileddir/parser.mly
build $ocamlkompileddir/interpreter $
    | $ocamlkompileddir/realdef.cmx : ocamlopt $ocamlkompileddir/constants.ml $
                                               $ocamlkompileddir/prelude.ml   $
                                               $ocamlkompileddir/plugin.ml    $
                                               $blockchainplugindir/HASH.ml   $
                                               $ocamlkompileddir/realdef.ml   $
                                               $ocamlkompileddir/parser.mli   $
                                               $ocamlkompileddir/parser.ml    $
                                               $ocamlkompileddir/lexer.ml     $
                                               $ocamlkompileddir/run.ml       $
                                               $ocamlkompileddir/interpreter.ml
    flags = -g -w -11-26 -I $ocamlkompileddir -I $blockchainplugindir $
            -package gmp -package dynlink -package zarith -package str -package uuidm -package unix -package cryptokit $
            -linkpkg -linkall -thread -safe-string

build $ocamlkompileddir/realdef.cmxs : ocamlopt $ocamlkompileddir/realdef.cmx
    flags = -shared

# Testing
# =======

build test : phony check-spec

# Unit Tests as reachability claims
# ---------------------------------

build check-spec : kprove $tangleddir/plutus-core-spec.k | spec-java
    directory = $builddir/plutus-core-java

build check-10 : kprove sum-to-10-spec.k $
                 | spec-java
    directory = $builddir/plutus-core-java

# Integration tests
# -----------------
#
# Since the OCaml does not support reachability claims (even
# concrete ones) these also function as smoke tests for the OCaml backend)

# t/builtin-app.plc (ocaml)
#
build .build/t/builtin-app.plc.ocaml.out : krun t/builtin-app.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml/
    flags     = --interpret
build .build/t/builtin-app.plc.ocaml.test : check-test-result .build/t/builtin-app.plc.ocaml.out
    expected = t/builtin-app.plc.expected

# t/builtin-app.plc (java)
#
build .build/t/builtin-app.plc.java.out  : krun t/builtin-app.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/builtin-app.plc.java.test : check-test-result .build/t/builtin-app.plc.java.out
    expected = t/builtin-app.plc.expected

# t/bytestring.plc (ocaml)
#
build .build/t/bytestring.plc.ocaml.out : krun t/bytestring.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/bytestring.plc.ocaml.test : check-test-result .build/t/bytestring.plc.ocaml.out
    expected = t/bytestring.plc.ocaml.expected

# t/bytestring.plc (java)
#
build .build/t/bytestring.plc.java.out  : krun t/bytestring.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/bytestring.plc.java.test : check-test-result .build/t/bytestring.plc.java.out
    expected = t/bytestring.plc.java.expected

# Cryptography
# ------------

# t/sha2.plc (ocaml)
#
build .build/t/sha2.plc.ocaml.out : krun t/sha2.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml/
    flags     = --interpret
build .build/t/sha2.plc.ocaml.test : check-test-result .build/t/sha2.plc.ocaml.out
    expected = t/sha2.plc.ocaml.expected

# t/sha2.plc (java)
#
build .build/t/sha2.plc.java.out  : krun t/sha2.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/sha2.plc.java.test : check-test-result .build/t/sha2.plc.java.out
    expected = t/sha2.plc.java.expected

# t/sha3.plc (ocaml)
#
build .build/t/sha3.plc.ocaml.out : krun t/sha3.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml/
    flags     = --interpret
build .build/t/sha3.plc.ocaml.test : check-test-result .build/t/sha3.plc.ocaml.out
    expected = t/sha3.plc.ocaml.expected

# t/sha3.plc (java)
#
build .build/t/sha3.plc.java.out  : krun t/sha3.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/sha3.plc.java.test : check-test-result .build/t/sha3.plc.java.out
    expected = t/sha3.plc.java.expected

# Complex tests
# -------------

# These are tests involving recursion, and other tests from the Roman and the
# IOHK Plutus team.

# t/sum-to-10.plc (ocaml)
#
build .build/t/sum-to-10.plc.ocaml.out : krun t/sum-to-10.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/sum-to-10.plc.ocaml.test : check-test-result .build/t/sum-to-10.plc.ocaml.out
    expected = t/sum-to-10.plc.ocaml.expected

# t/sum-to-10.plc (java)
#
build .build/t/sum-to-10.plc.java.out  : krun t/sum-to-10.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/sum-to-10.plc.java.test : check-test-result .build/t/sum-to-10.plc.java.out
    expected = t/sum-to-10.plc.java.expected

# t/11-scott-to-int.plc (ocaml)
#
build .build/t/11-scott-to-int.plc.ocaml.out : krun t/11-scott-to-int.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/11-scott-to-int.plc.ocaml.test : check-test-result .build/t/11-scott-to-int.plc.ocaml.out
    expected = t/11-scott-to-int.plc.ocaml.expected

# t/11-scott-to-int.plc (java)
#
build .build/t/11-scott-to-int.plc.java.out  : krun t/11-scott-to-int.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/11-scott-to-int.plc.java.test : check-test-result .build/t/11-scott-to-int.plc.java.out
    expected = t/11-scott-to-int.plc.java.expected

# t/if-then-else.plc (ocaml)
#
build .build/t/if-then-else.plc.ocaml.out : krun t/if-then-else.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/if-then-else.plc.ocaml.test : check-test-result .build/t/if-then-else.plc.ocaml.out
    expected = t/if-then-else.plc.ocaml.expected

# t/if-then-else.plc (java)
#
build .build/t/if-then-else.plc.java.out  : krun t/if-then-else.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/if-then-else.plc.java.test : check-test-result .build/t/if-then-else.plc.java.out
    expected = t/if-then-else.plc.java.expected

# t/sum-list.plc (ocaml)
#
build .build/t/sum-list.plc.ocaml.out : krun t/sum-list.plc | spec-ocaml
    directory = $builddir/plutus-core-ocaml
    flags     = --interpret
build .build/t/sum-list.plc.ocaml.test : check-test-result .build/t/sum-list.plc.ocaml.out
    expected = t/sum-list.plc.ocaml.expected

# t/sum-list.plc (java)
#
build .build/t/sum-list.plc.java.out  : krun t/sum-list.plc | spec-java
    directory = $builddir/plutus-core-java
build .build/t/sum-list.plc.java.test : check-test-result .build/t/sum-list.plc.java.out
    expected = t/sum-list.plc.java.expected

# Aliases
# -------

build spec-ocaml : phony $builddir/plutus-core-ocaml/plutus-core-kompiled/interpreter $ocamlkompileddir/realdef.cmxs
build spec-java  : phony $builddir/plutus-core-java/plutus-core-kompiled/timestamp
